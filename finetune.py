"""
finetune.py
---------------

This script performs LoRA fine-tuning of a large language model using the
Unsloth FastLanguageModel utilities. It expects a dataset in JSONL
format where each line contains a JSON object with `prompt` and
`completion` fields. The resulting model is saved in the `lora_model`
directory. To run this script, make sure the dataset has been
generated by `app.py` and the necessary dependencies are installed.
"""

from unsloth import FastLanguageModel, is_bfloat16_supported
import torch
from datasets import load_dataset
from trl import SFTTrainer

# Maximum sequence length for the model
max_seq_length = 2048

# Load a 4-bit quantized Meta-Llama model
model, tokenizer = FastLanguageModel.from_pretrained(
    model_name="unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit",
    max_seq_length=max_seq_length,
    load_in_4bit=True,
)

# Prepare the model for LoRA fine-tuning
model = FastLanguageModel.get_peft_model(
    model,
    r=64,
    target_modules=[
        "q_proj",
        "k_proj",
        "v_proj",
        "o_proj",
        "gate_proj",
        "up_proj",
        "down_proj",
    ],
    lora_alpha=128,
    lora_dropout=0,
    bias="none",
    use_gradient_checkpointing="unsloth",
    random_state=3407,
    use_rslora=False,
)

# Load the dataset
dataset = load_dataset("json", data_files="dataset.jsonl", split="train")

# Get chat template and formatting function
tokenizer = FastLanguageModel.get_chat_template(tokenizer)

def formatting_prompts_func(examples):
    texts = []
    for prompt, completion in zip(examples["prompt"], examples["completion"]):
        text = tokenizer.apply_chat_template([
            {"role": "user", "content": prompt},
            {"role": "assistant", "content": completion},
        ], tokenize=False)
        texts.append(text)
    return {"text": texts}

# Apply formatting to the dataset
dataset = dataset.map(formatting_prompts_func, batched=True)

# Configure the SFT trainer
trainer = SFTTrainer(
    model=model,
    tokenizer=tokenizer,
    train_dataset=dataset,
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    dataset_num_proc=2,
    packing=False,
    args=dict(
        per_device_train_batch_size=2,
        gradient_accumulation_steps=4,
        warmup_steps=5,
        max_steps=60,
        learning_rate=2e-4,
        fp16=not is_bfloat16_supported(),
        bf16=is_bfloat16_supported(),
        logging_steps=1,
        optim="adamw_8bit",
        weight_decay=0.01,
        lr_scheduler_type="linear",
        seed=3407,
        output_dir="outputs",
    ),
)

# Train and save the LoRA-adapted model
trainer.train()
trainer.save_model("lora_model")